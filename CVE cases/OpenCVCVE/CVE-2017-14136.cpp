//============================================================================
// Name        : opencv_in_cpp.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : CVE-2017-14136
//============================================================================

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
using namespace std;
using namespace cv;

Mat read_from_dump(char * path){
	cout <<  "\n === read_from_dump(char * path) ===\n";
	ifstream file;
	file.open(path);
	Mat res;
	if (file.is_open()){
		unsigned int rows;
		unsigned int columns;
		unsigned int type;
		int * data;
		string line;
		char * word;
		vector<unsigned char> arr;
			
		getline(file, line);
		char * c_line = new char [line.length() + 1];	

		//get rows
		strcpy(c_line, line.c_str());		
		word = strtok(c_line," "); //skip first word	
		word = strtok(NULL," \n"); 	
		rows = atoi(word);
		
		//get columns		
		getline(file, line);
		c_line = new char [line.length() + 1];   
		strcpy(c_line, line.c_str());
		word = strtok(c_line," \n"); // skip first word
		word = strtok(NULL," \n");	
		columns = atoi(word);
		
		//get type
		getline(file, line);
		c_line = new char [line.length() + 1];   
		strcpy(c_line, line.c_str());
		word = strtok(c_line," \n"); // skip first word
		word = strtok(NULL," \n");	
		type = atoi(word);
		
		//get data
		getline(file, line);
		c_line = new char [line.length() + 1];   
		strcpy(c_line, line.c_str());
		
		word = strtok(c_line," \n"); // skip first word
		word = strtok(NULL," \n");
		while (word != NULL){
			//cout << word << " ";
			arr.push_back(atoi(word));
			word = strtok(NULL," \n");	
		}		
		cout << "[DEBUG]: arr.size(): " << arr.size() << "; rows * columns = " << rows*columns << endl;
		
		//res.create(rows*columns, 1, type);
		res.push_back(arr);
		res = res.reshape(0, rows);
		//Mat new_res(rows, columns, type, &arr);
		cout << " === end of read_from_dump(char * path) === \n\n";		
		return res;
	}
	else{
		cout << "Could not open file for read." << endl;
		cout << " === end of read_from_dump(char * path) === \n\n";		
		return res;
	}	
	
}

void print_pixels(Mat * image){
	cout << "\n === print_pixels(Mat * image) === " << endl;

	ofstream file;
	file.open("mat_dump.txt");
	if (file.is_open()){
		file << "rows: " << image->rows << endl;
		file << "columns: " << image->cols << endl;
		file << "type: " << image->type() << endl;
		file << "data: ";
		
		for (unsigned int i = 0; i < image->rows; i++){
			for (unsigned int j = 0; j < image->cols; j++){
				file << (int) image[0].at<unsigned char>(i,j) << " "; // see line 3078 @ mat.hpp
				//printf("%d " ,image[0].at<unsigned char>(i,j));
			}
		}
		cout << *image;
		file << endl;
		file.close();
	}
	else{
		cout << "Failed to open file..." << endl;
	}
	cout << endl << " === end of print_pixels(Mat * image) === \n" << endl;
}

void opencv_load_img(Mat * image){
	cout << " === opencv_load_img() === "<< endl;
	printf(" === start of imread(...) ===\n");
	//*image = imread("poc_from_git_corrupted.pgm", IMREAD_GRAYSCALE);
	*image = imread("feep.pgm", IMREAD_GRAYSCALE);
	printf(" === end of imread(...) === \n");
	cout << " === end of opencv_load_img() ===" << endl;
}

int main(int argc, const char ** argv) {

	cout << " === Hello World!!! === \n\n";
	Mat image;
	opencv_load_img(&image);
	
	print_pixels(&image);
	
	char * path = "mat_dump.txt";
	Mat image_read = read_from_dump(path);
	cout << "[DEBUG]: image_read values: " << image_read << endl;		
	
	return 0;
}

