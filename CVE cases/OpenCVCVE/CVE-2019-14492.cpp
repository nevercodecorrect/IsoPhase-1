//============================================================================
// Name        : CVE-2017-14136.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
using namespace std;
using namespace cv;

void opencv_load_img(Mat * image){
	cout << "\n === opencv_load_img() === "<< endl;
	printf(" === start of imread(...) ===\n");
	*image = imread("20191019_203012.jpg", IMREAD_GRAYSCALE);
	if (image->data == NULL){
		printf("[ERROR]: There was a problem loading the image!\n");
		exit(0);
	}
	printf(" === end of imread(...) === \n");
	cout << " === end of opencv_load_img() ===\n" << endl;
}

void opencv_load_classifier(CascadeClassifier* c, const char * path){
        printf("\n === opencv_load_classifier() ===\n");
	if (!c->load(path))
        {  
            cout << "[DEBUG]: Failed to load " << path << endl;
	    exit(0);
        }
	cout << "[DEBUG]:" << path << " was loaded successfuly."	<< endl;
	printf(" === end of opencv_load_classifier() === \n\n");

}

vector<Rect> opencv_detect(Mat * mat, CascadeClassifier c){
	cout << "\n === opencv_detect() ===\n";
	vector<Rect> objs;
	c.detectMultiScale(*mat, objs, 1.1, 2, 0 | CASCADE_SCALE_IMAGE, Size(30, 30));
	cout << " === end of opencv_detect() ===\n\n";
	return objs;
}

int main(int argc, const char ** argv) {

	cout << " === Hello World!!! === \n\n";
	if (argc < 2){
		printf("Need input CascadeClassifier...\n");
		exit(0);
	}
	Mat image;
	opencv_load_img(&image);
	CascadeClassifier eye_Classifier;
	opencv_load_classifier(&eye_Classifier, argv[1]);
	vector<Rect> objs = opencv_detect(&image, eye_Classifier);
	printf("[DEBUG]: %lu obj(s) were detected.\n", objs.size());
	return 0;
}

